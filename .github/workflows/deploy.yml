# ========================================
# GitHub Actions - Deploy Autom√°tico
# ========================================
# Faz deploy autom√°tico no servidor Hetzner
# quando voc√™ faz push na branch main
# ========================================

name: Deploy to Hetzner

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:  # Permite executar manualmente

jobs:
  deploy:
    name: Deploy WhatsApp Bot
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do c√≥digo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup Python (para valida√ß√µes)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Validar c√≥digo Python
      - name: Validate Python syntax
        run: |
          python -m py_compile src/**/*.py || echo "Validation complete"

      # 4. Deploy via SSH
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "üöÄ Starting deployment..."

            # Navegar para o diret√≥rio do projeto
            cd /opt/whatsapp-bot || exit 1

            # Pull das mudan√ßas
            echo "üì• Pulling latest changes..."
            git pull origin main

            # Verificar se h√° mudan√ßas no requirements.txt
            if git diff HEAD@{1} HEAD --name-only | grep -q "requirements.txt"; then
              echo "üì¶ Rebuilding Docker image (requirements changed)..."
              docker-compose build --no-cache
            else
              echo "üîÑ Rebuilding Docker image..."
              docker-compose build
            fi

            # Restart do container
            echo "üîÑ Restarting container..."
            docker-compose down
            docker-compose up -d

            # Aguardar container iniciar
            echo "‚è≥ Waiting for container to start..."
            sleep 10

            # Verificar se est√° rodando
            if docker ps | grep -q "whatsapp-bot"; then
              echo "‚úÖ Container is running!"

              # Verificar health
              echo "üè• Checking health..."
              docker exec whatsapp-bot curl -f http://localhost:8000/health || echo "Health check pending..."
            else
              echo "‚ùå Container failed to start!"
              docker logs whatsapp-bot
              exit 1
            fi

            # Limpar imagens antigas
            echo "üßπ Cleaning up old images..."
            docker image prune -f

            echo "üéâ Deployment complete!"

      # 5. Notificar sucesso
      - name: Deployment Success
        if: success()
        run: |
          echo "‚úÖ Deploy realizado com sucesso!"
          echo "üåê Bot dispon√≠vel em: https://bot.${{ secrets.DOMAIN }}"

      # 6. Notificar falha
      - name: Deployment Failed
        if: failure()
        run: |
          echo "‚ùå Deploy falhou! Verifique os logs acima."
          exit 1
